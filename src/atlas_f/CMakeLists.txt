
### fortranize function

function( fortranize file )
  unset( result )
  file( STRINGS "${file}" lines )
  foreach( i IN LISTS lines )
  string( REGEX REPLACE "^/\\* (#undef .*) \\*/$" "! \\1" i "${i}" )
  set( result "${result}${i}\n" )
  endforeach()
  file( WRITE "${file}" "${result}" )
endfunction()

configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/../atlas/internals/atlas_defines.h.in
                ${CMAKE_CURRENT_BINARY_DIR}/../atlas/atlas_f.h )

install( FILES
  ${CMAKE_CURRENT_BINARY_DIR}/../atlas/atlas_f.h
  DESTINATION
  ${INSTALL_INCLUDE_DIR}/atlas )


### fortran bindings

function(generate_fortran_bindings output filename)

  set( options "" )
  set( single_value_args OUTPUT MODULE )
  set( multi_value_args "" )
  cmake_parse_arguments( _PAR "${options}" "${single_value_args}" "${multi_value_args}"  ${_FIRST_ARG} ${ARGN} )

  get_filename_component(base ${filename} NAME_WE)
  set(base_abs ${CMAKE_CURRENT_SOURCE_DIR}/${base})
  set(outfile ${CMAKE_CURRENT_BINARY_DIR}/${base}_c_binding.f90)

  if( _PAR_OUTPUT )
    set(outfile ${_PAR_OUTPUT})
  endif()
  set(${output} ${${output}} ${outfile} PARENT_SCOPE)

  if( _PAR_MODULE )
    add_custom_command(
        OUTPUT ${outfile}
        COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tools/c2f.py ${CMAKE_CURRENT_SOURCE_DIR}/${filename} -o ${outfile} -m ${_PAR_MODULE}
        DEPENDS ${filename} )
  else()
    add_custom_command(
        OUTPUT ${outfile}
        COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tools/c2f.py ${CMAKE_CURRENT_SOURCE_DIR}/${filename} -o ${outfile}
        DEPENDS ${filename} )
  endif()
  set_source_files_properties(${outfile} PROPERTIES GENERATED TRUE)
endfunction()

set( PYTHON_VERSION "${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.${PYTHON_VERSION_PATCH}")
set( PYTHON_REQUIRED_VERSION 2.7.8 )
if( PYTHON_VERSION VERSION_LESS ${PYTHON_REQUIRED_VERSION} )
  ecbuild_warn("Python version ${PYTHON_VERSION} is inadequate to use Fortran preprocessor 'fypp'."
          "Required version is ${PYTHON_REQUIRED_VERSION}. No problem, previously preprocessed files will be used."
          "Just be aware that these will not be updated." )

  function(preprocess_fypp output filename)

    set( options "" )
    set( single_value_args OUTPUT )
    set( multi_value_args "" )
    cmake_parse_arguments( _PAR "${options}" "${single_value_args}" "${multi_value_args}"  ${_FIRST_ARG} ${ARGN} )

    get_filename_component(base ${filename} NAME_WE)
    set(base_abs ${CMAKE_CURRENT_SOURCE_DIR}/${base})
    set(outfile ${CMAKE_CURRENT_SOURCE_DIR}/autogenerated/${base}_fypp.F90)

    if( _PAR_OUTPUT )
      set(outfile ${_PAR_OUTPUT})
    endif()
    set(${output} ${${output}} ${outfile} PARENT_SCOPE)
  endfunction()

else()

  function(preprocess_fypp output filename)

    set( options "" )
    set( single_value_args OUTPUT )
    set( multi_value_args "" )
    cmake_parse_arguments( _PAR "${options}" "${single_value_args}" "${multi_value_args}"  ${_FIRST_ARG} ${ARGN} )

    get_filename_component(base ${filename} NAME_WE)
    set(base_abs ${CMAKE_CURRENT_SOURCE_DIR}/${base})
    set(outfile ${CMAKE_CURRENT_SOURCE_DIR}/autogenerated/${base}_fypp.F90)
    # set(outfile ${CMAKE_CURRENT_BINARY_DIR}/${filename})

    if( _PAR_OUTPUT )
      set(outfile ${_PAR_OUTPUT})
    endif()
    set(${output} ${${output}} ${outfile} PARENT_SCOPE)

    add_custom_command(
      OUTPUT ${outfile}
      COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/tools/fypp -l 132 -p ${CMAKE_CURRENT_SOURCE_DIR}/${filename} ${outfile}
      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${filename} )
    set_source_files_properties(${outfile} PROPERTIES GENERATED TRUE)
  endfunction()

endif()

generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/atlas.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/grid/grids.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/grid/Structured.h
    MODULE    atlas_grid_Structured_c_binding
    OUTPUT    grid_Structured_c_binding.f90 )
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/grid/GridDistribution.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/Mesh.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/Nodes.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/Connectivity.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/HybridElements.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/Elements.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/ElementType.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/BuildParallelFields.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/BuildPeriodicBoundaries.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/BuildHalo.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/BuildEdges.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/BuildDualMesh.h)
#generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/GenerateMesh.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/actions/WriteLoadBalanceReport.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/mesh/generators/MeshGenerator.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/output/Output.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/output/Gmsh.h
  MODULE    atlas_output_gmsh_c_binding
  OUTPUT    outout_Gmsh_c_binding.f90)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/field/State.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/field/Field.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/field/FieldSet.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/functionspace/FunctionSpace.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/functionspace/Spectral.h
    MODULE    atlas_functionspace_Spectral_c_binding
    OUTPUT    functionspace_Spectral_c_binding.f90 )
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/functionspace/StructuredColumns.h
    MODULE    atlas_functionspace_StructuredColumns_c_binding
    OUTPUT    functionspace_StructuredColumns_c_binding.f90 )
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/functionspace/NodeColumnsInterface.h
    MODULE    atlas_functionspace_NodeColumns_c_binding
    OUTPUT    functionspace_NodeColumns_c_binding.f90)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/functionspace/EdgeColumns.h
    MODULE    atlas_functionspace_EdgeColumns_c_binding
    OUTPUT    functionspace_EdgeColumns_c_binding.f90)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/numerics/Nabla.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/numerics/Nabla.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/numerics/Method.h )
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/numerics/fvm/Method.h
    MODULE    atlas_fvm_method_c_binding
    OUTPUT    fvm_method_c_binding.f90 )
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/trans/Trans.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/util/Metadata.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/util/Config.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/util/io/Gmsh.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/parallel/mpi/mpi.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/parallel/HaloExchange.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/parallel/GatherScatter.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/parallel/Checksum.h)
generate_fortran_bindings(FORTRAN_BINDINGS ../atlas/runtime/ErrorHandling.h)
generate_fortran_bindings(FORTRAN_BINDINGS internals/atlas_logging.h)
generate_fortran_bindings(FORTRAN_BINDINGS internals/atlas_resource.h)
generate_fortran_bindings(FORTRAN_BINDINGS internals/atlas_value.h)
generate_fortran_bindings(FORTRAN_BINDINGS internals/atlas_read_file.h)

preprocess_fypp( atlas_f_src field/atlas_Field_module.F90 )
ecbuild_debug_var( atlas_f_src )

### atlas fortran lib
ecbuild_add_library( TARGET atlas_f
    AUTO_VERSION
    CONDITION CMAKE_Fortran_COMPILER_LOADED
    SOURCES
        ${FORTRAN_BINDINGS}
        ${atlas_f_src}
        atlas_module.F90
        util/atlas_kinds_module.F90
        util/atlas_JSON_module.F90
        util/atlas_Config_module.F90
        util/atlas_Metadata_module.F90
        util/atlas_resource_module.F90
        util/atlas_Logging_module.F90
        util/atlas_Error_module.F90
        util/atlas_Value_module.F90
        output/atlas_output_module.F90
        functionspace/atlas_FunctionSpace_module.F90
        functionspace/atlas_functionspace_EdgeColumns_module.F90
        functionspace/atlas_functionspace_NodeColumns_module.F90
        functionspace/atlas_functionspace_StructuredColumns_module.F90
        functionspace/atlas_functionspace_Spectral_module.F90
        field/atlas_FieldSet_module.F90
        field/atlas_State_module.F90
        grid/atlas_Grid_module.F90
        grid/atlas_GridDistribution_module.F90
        grid/atlas_grids_module.F90
        mesh/atlas_MeshGenerator_module.F90
        mesh/atlas_Mesh_module.F90
        mesh/atlas_mesh_Nodes_module.F90
        mesh/atlas_mesh_Edges_module.F90
        mesh/atlas_mesh_Cells_module.F90
        mesh/atlas_Connectivity_module.F90
        mesh/atlas_HybridElements_module.F90
        mesh/atlas_Elements_module.F90
        mesh/atlas_ElementType_module.F90
        mesh/atlas_mesh_actions_module.F90
        numerics/atlas_Method_module.F90
        numerics/atlas_fvm_module.F90
        numerics/atlas_Nabla_module.F90
        parallel/atlas_mpi_module.F90
        parallel/atlas_GatherScatter_module.F90
        parallel/atlas_Checksum_module.F90
        parallel/atlas_HaloExchange_module.F90
        trans/atlas_Trans_module.F90
        internals/atlas_object_module.F90
        internals/atlas_refcounted_module.F90
        internals/atlas_owned.cc
        internals/atlas_logging.h
        internals/atlas_logging.cc
        internals/atlas_resource.h
        internals/atlas_resource.cc
        internals/atlas_value.h
        internals/atlas_value.cc
        internals/atlas_read_file.h
        internals/atlas_read_file.cc
  PRIVATE_INCLUDES ${MPI_Fortran_INCLUDE_PATH}
  LIBS atlas ${MPI_Fortran_LIBRARIES} fckit
)
