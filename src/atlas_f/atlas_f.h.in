#ifndef atlas_f_h
#define atlas_f_h

#include "fckit/fckit.h"

#if 0
// clang-format off
#endif

#define ATLAS_HAVE_OMP @ATLAS_HAVE_OMP@
#define ATLAS_HAVE_TRANS @ATLAS_HAVE_TRANS@
#define ATLAS_HAVE_ACC @ATLAS_HAVE_ACC@
#define ATLAS_BITS_GLOBAL @ATLAS_BITS_GLOBAL@
#define ATLAS_BITS_LOCAL @ATLAS_BITS_LOCAL@

#define ATLAS_FINAL FCKIT_FINAL

#ifndef PGIBUG_ATLAS_197
#define CPTR_PGIBUG_A c_ptr()
#define CPTR_PGIBUG_B c_ptr()
#define PGIBUG_ATLAS_197 0
#endif

#if 0
// clang-format on
#endif

#endif

#ifdef ALWAYS_IGNORE_THIS_WITH_NORMAL_PREPROCESSOR
#:mute


#:def ATLAS_ABORT( string )
#!   Abort with message
#!   Usage:
#!      if( condition ) @{ ATLAS_ABORT( "error message" ) }@
#!
  call fckit_exception%abort( ${string}$, "${_FILE_}$", ${_LINE_}$ )
#:enddef

#:def ENABLE_ATLAS_ABORT()
#!   Use this macro in the "use <module>" location to enable 
#!   Usage:
#!        @:ENABLE_ATLAS_ABORT()
  use fckit_exception_module, only : fckit_exception
#:enddef


#:def ENABLE_ATLAS_ASSERT()
#!   Use this macro in the "use <module>" location to enable 
#!   Usage:
#!        @:ENABLE_ATLAS_ABORT()
  use fckit_exception_module, only : fckit_exception
#:enddef

#:def ATLAS_ASSERT( cond )
#!   Assert condition evaluates to .True. , otherwise abort
#!   Usage:
#!      @:ATLAS_ASSERT( cond )
#!   or inline:
#!      @{ ATLAS_ASSERT( cond ) }@
#!
if (.not. (${cond}$)) then
  call fckit_exception%abort( '${cond.replace("'", "''")}$', "${_FILE_}$", ${_LINE_}$ )
end if
#:enddef

#:def ENABLE_ATLAS_TRACE()
#!   Use this macro in the "use <module>" location to enable 
#!   Usage:
#!        @:ENABLE_ATLAS_TRACE()
  use atlas_trace_module, only : atlas_Trace
#:enddef
#:def ATLAS_TRACE( title, labels = None )
#!   Create a right-hand-side atlas_Trace object in a nicer way
#!   Usage:
#!      type( atlas_Trace ) :: trace
#!      trace = @{ ATLAS_TRACE( "title" ) }@
#!      ...
#!      call trace%final()
#!
#!   or with labels:
#!      type( atlas_Trace ) :: trace
#!      trace = @{ ATLAS_TRACE( "title", {"label1","label2"} ) }@
#!      ...
#!      call trace%final()
#!
  #:if labels is not None
    atlas_Trace( "${_FILE_}$", ${_LINE_}$, ${title}$, ${labels}$ )
  #:else
    atlas_Trace( "${_FILE_}$", ${_LINE_}$, ${title}$ )
  #:endif
#:enddef

#:def ATLAS_TRACE_BEGIN( trace, title, labels = None )
#!   Create a right-hand-side atlas_Trace object in a nicer way
#!   Usage:
#!      type( atlas_Trace ) :: trace
#!      trace = @{ ATLAS_TRACE( "title" ) }@
#!      ...
#!      call trace%final()
#!
#!   or with labels:
#!      type( atlas_Trace ) :: trace
#!      trace = @{ ATLAS_TRACE( "title", {"label1","label2"} ) }@
#!      ...
#!      call trace%final()
#!
  #:if labels is not None
    ${trace}$ = atlas_Trace( "${_FILE_}$", ${_LINE_}$, ${title}$, ${labels}$ )
  #:else
    ${trace}$ = atlas_Trace( "${_FILE_}$", ${_LINE_}$, ${title}$ )
  #:endif
#:enddef

#:def ATLAS_TRACE_END( trace )
  call ${trace}$ % final()
#:enddef

#:endmute
#endif
